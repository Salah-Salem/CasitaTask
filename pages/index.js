import Head from 'next/head'
import { useEffect, useState } from 'react'
import Geocode from 'react-geocode'
import { Map, Search, Select } from '../components'
import { Entries } from '../constants/feed'

export default function Home() {
  const { Entry } = Entries
  const [results, setResults] = useState(Entry)
  const [locations, setLocations] = useState([])
  const [token, setToken] = useState('')
  const [token2, setToken2] = useState('')
  let cities = []

  // extract city name from message
  const getCity = (str) => {
    let data = str.split(',')
    data.reverse()
    for (let i = 0; i < data.length; i++) {
      let format = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/
      if (!format.test(data[i].trim())) {
        return data[i].trim()
      }
    }
  }

  useEffect(() => {
    if (token2 !== '' && token == '') {
      setResults((prev) => [
        ...Entry.filter((item) => item.sentiment == token2),
      ])
    } else if (token2 == '' && token !== '') {
      setResults((prev) => [
        ...Entry.filter((item) => item.message.includes(token)),
      ])
    } else if (token2 !== '' && token !== '') {
      setResults((prev) => [
        ...Entry.filter((item) => item.sentiment == token2),
      ])
      setResults((prev) => [
        ...results.filter((item) => item.message.includes(token)),
      ])
    } else {
      setResults(Entry)
    }
  }, [token, token2])

  useEffect(() => {
    setLocations([])
    results.map((item) => {
      cities.push(getCity(item.message))
    })

    Geocode.setApiKey('AIzaSyDKIrHpIyMYrcm2D5CFf-2r4QrwTJtHh-E')
    cities.map(async (item) => {
      const res = await Geocode.fromAddress(item)

      if (res.status == 'OK') {
        const { lat, lng } = res.results[0].geometry.location
        setLocations((prev) => [...prev, { city: item, lat: lat, lng: lng }])
      } else {
        console.error(res)
      }
    })
  }, [results])

  const handleClear = () => {
    setToken('')
    setToken2('')
  }

  return (
    <div className="container">
      <Head>
        <title>Casita</title>
        <meta name="description" content="Generated by Salah Salem" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="main">
        <div className="row pt-5 pb-5 w-100">
          <form onSubmit={(e) => e.preventDefault()}>
            <div className="row">
              <div className="col-5">
                <Search onSearch={setToken} />
              </div>
              <div className="col-5">
                <Select onSelect={setToken2} />
              </div>
              <div className="col-2">
                <button type="reset" onClick={() => handleClear()}>
                  Clear
                </button>
              </div>
            </div>
          </form>
          <div className="col-12 results">
            {results.map((item, index) => (
              <div
                key={index}
                className={
                  item.sentiment == 'Neutrual'
                    ? 'alert-primary'
                    : item.sentiment == 'Negative'
                    ? 'alert-danger'
                    : 'alert-success'
                }
              >
                <h2>
                  {index + 1}-{item.sentiment}
                </h2>
                <p>{item.message}</p>
              </div>
            ))}
          </div>
        </div>
        <Map data={results} locations={locations} />
      </main>
    </div>
  )
}
